package aggregator

import (
	"bytes"
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

func Test_EntryPoint_Decode(t *testing.T) {
	testCases := []struct {
		byt []byte
		txn []Transaction
	}{
		// Case 000, Alchemy, https://sepolia.arbiscan.io/tx/0x310843e119e6c8d574a0ecf591fb5dc92ae3823f2ef5f135fac970e7a1678274
		{
			byt: hexutil.MustDecode("0x47e1da2a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000009632185d3851fd06304c09ba6f1c1308189be12b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000104383cb9270000000000000000000000008988dbc479db976976cd956be4dd74e773b90a060000000000000000000000000000000000000000000000000000000067768c4b000000000000000000000000ad63b2262eb7d1591ee8e6a85959a523dece79830000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004141b627146deeebb99f7eee28d4192e0f028b8c8333d08f430fbdccfc5c9831871b49261f9970eb8bde6c325c140fe6deb01a563e88a0a6d6bc03520fb4d2aae71c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
			txn: []Transaction{
				{
					Target:   common.HexToAddress("0x9632185d3851Fd06304C09BA6F1c1308189BE12b"),
					Value:    big.NewInt(0),
					CallData: hexutil.MustDecode("0x383cb9270000000000000000000000008988dbc479db976976cd956be4dd74e773b90a060000000000000000000000000000000000000000000000000000000067768c4b000000000000000000000000ad63b2262eb7d1591ee8e6a85959a523dece79830000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004141b627146deeebb99f7eee28d4192e0f028b8c8333d08f430fbdccfc5c9831871b49261f9970eb8bde6c325c140fe6deb01a563e88a0a6d6bc03520fb4d2aae71c00000000000000000000000000000000000000000000000000000000000000"),
				},
			},
		},
		// Case 001, Biconomy, https://sepolia.basescan.org/tx/0x480d6e3d721d1d5977545adf5fecf7af5343752ef7b8790d48900dc90a1e8987
		{
			byt: hexutil.MustDecode("0x00004680000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000484c32b1288a88a48f8e7d20173a1048589df182000000000000000000000000206ab72edea55819a9a90622873976a79d3419e30000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000206ab72edea55819a9a90622873976a79d3419e30000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001446e43e82400000000000000000000000000000000000000000000000000062794ddf3c4680000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006743be0000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004061663864306536633737356334326236336137363033396333333165663562353434373665633138626134633339336362623836326434373437643039316633000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
			txn: []Transaction{
				{
					Target:   common.HexToAddress("0x484C32b1288A88A48F8e7D20173a1048589Df182"),
					Value:    big.NewInt(0),
					CallData: hexutil.MustDecode("0x095ea7b3000000000000000000000000206ab72edea55819a9a90622873976a79d3419e30000000000000000000000000000000000000000000000004563918244f40000"),
				},
				{
					Target:   common.HexToAddress("0x206ab72edea55819a9a90622873976A79d3419E3"),
					Value:    big.NewInt(0),
					CallData: hexutil.MustDecode("0x6e43e82400000000000000000000000000000000000000000000000000062794ddf3c4680000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006743be0000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000040616638643065366337373563343262363361373630333963333331656635623534343736656331386261346333393363626238363264343734376430393166330000000000000000000000000000000000000000000000000000000000000000"),
				},
			},
		},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("%03d", i), func(t *testing.T) {
			var err error

			var txn []Transaction
			{
				txn, err = Decode(tc.byt)
				if err != nil {
					t.Fatal(err)
				}
			}

			if len(txn) != len(tc.txn) {
				t.Fatal("expected", len(tc.txn), "got", len(txn))
			}

			for j := range txn {
				if !bytes.Equal(txn[j].Target.Bytes(), tc.txn[j].Target.Bytes()) {
					t.Fatal("expected", tc.txn[j].Target.Hex(), "got", txn[j].Target.Hex())
				}
				if !bytes.Equal(txn[j].Value.Bytes(), tc.txn[j].Value.Bytes()) {
					t.Fatal("expected", tc.txn[j].Value.String(), "got", txn[j].Value.String())
				}
				if !bytes.Equal(txn[j].CallData, tc.txn[j].CallData) {
					t.Fatal("expected", string(tc.txn[j].CallData), "got", string(txn[j].CallData))
				}
			}
		})
	}
}
