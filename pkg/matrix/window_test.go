package matrix

import (
	"fmt"
	"testing"
)

func Test_Matrix_Window_Has_outer_true(t *testing.T) {
	testCases := []struct {
		win Window
		bck Bucket
	}{
		// Case 000
		{
			win: Window{
				{100, 100, 100, 100}, // bl
				{100, 100, 100, 100}, // tr
			},
			bck: Bucket{100, 100, 100, 100},
		},
		// Case 001
		//
		//     +----------+
		//     |x         |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 131, 152},
		},
		// Case 002
		//
		//     +----------+
		//     |x         |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 138, 114},
		},
		// Case 003
		//
		//     +----------+
		//     |    x     |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 148, 152},
		},
		// Case 004
		//
		//     +----------+
		//     |         x|
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 131, 152},
		},
		// Case 005
		//
		//     +----------+
		//     |         x|
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 127, 147},
		},
		// Case 006
		//
		//     +----------+
		//     |          |
		//     |         x|
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 131, 119},
		},
		// Case 007
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |         x|
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 120, 131, 152},
		},
		// Case 008
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |         x|
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 120, 130, 159},
		},
		// Case 009
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |    x     |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 146, 152},
		},
		// Case 010
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |x         |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 131, 152},
		},
		// Case 011
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |x         |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 137, 158},
		},
		// Case 012
		//
		//     +----------+
		//     |          |
		//     |x         |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 131, 139},
		},
		// Case 013
		//
		//     +----------+
		//     |          |
		//     |x         |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 131, 160},
		},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("%03d", i), func(t *testing.T) {
			has := tc.win.Has(tc.bck)

			if has != true {
				t.Fatal("expected", true, "got", has)
			}
		})
	}
}

func Test_Matrix_Window_Has_inner_true(t *testing.T) {
	testCases := []struct {
		win Window
		bck Bucket
	}{
		// Case 000
		//
		//     +----------+
		//     |          |
		//     |   x      |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 121, 103, 163},
		},
		// Case 001
		//
		//     +----------+
		//     |          |
		//     |   x      |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 122, 110, 159},
		},
		// Case 002
		//
		//     +----------+
		//     |          |
		//     |      x   |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 122, 100, 163},
		},
		// Case 003
		//
		//     +----------+
		//     |          |
		//     |      x   |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 123, 111, 113},
		},
		// Case 004
		//
		//     +----------+
		//     |          |
		//     |      x   |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 121, 163, 100},
		},
		// Case 005
		//
		//     +----------+
		//     |          |
		//     |  x       |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 121, 100, 101},
		},
		// Case 006
		//
		//     +----------+
		//     |          |
		//     |  x       |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 122, 115, 104},
		},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("%03d", i), func(t *testing.T) {
			has := tc.win.Has(tc.bck)

			if has != true {
				t.Fatal("expected", true, "got", has)
			}
		})
	}
}

func Test_Matrix_Window_Has_outer_false(t *testing.T) {
	testCases := []struct {
		win Window
		bck Bucket
	}{
		// Case 000
		{
			win: Window{
				{100, 100, 100, 100}, // bl
				{100, 100, 100, 100}, // tr
			},
			bck: Bucket{100, 100, 100, 101},
		},
		// Case 001
		//
		//    x
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 123, 131, 152},
		},
		// Case 002
		//
		//    x
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 124, 138, 114},
		},
		// Case 003
		//
		//          x
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 125, 148, 152},
		},
		// Case 004
		//
		//                 x
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 124, 129, 150},
		},
		// Case 005
		//
		//                 x
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{126, 124, 127, 147},
		},
		// Case 006
		//
		//     +----------+
		//     |          |
		//     |          |x
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 123, 131, 119},
		},
		// Case 007
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//                 x
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 119, 131, 152},
		},
		// Case 008
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//                 x
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{125, 118, 130, 159},
		},
		// Case 009
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//          x
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 119, 146, 152},
		},
		// Case 010
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//    x
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 119, 131, 152},
		},
		// Case 011
		//
		//     +----------+
		//     |          |
		//     |          |
		//     |          |
		//     +----------+
		//    x
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{116, 119, 137, 158},
		},
		// Case 012
		//
		//     +----------+
		//     |          |
		//    x|          |
		//     |          |
		//     +----------+
		//
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 123, 131, 139},
		},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("%03d", i), func(t *testing.T) {
			has := tc.win.Has(tc.bck)

			if has != false {
				t.Fatal("expected", false, "got", has)
			}
		})
	}
}

func Benchmark_Matrix_Window_Has(b *testing.B) {
	testCases := []struct {
		win Window
		bck Bucket
	}{
		// Case 000, ~2.80 ns/op
		{
			win: Window{
				{100, 100, 100, 100}, // bl
				{100, 100, 100, 100}, // tr
			},
			bck: Bucket{100, 100, 100, 100},
		},
		// Case 001, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 131, 152},
		},
		// Case 002, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 138, 114},
		},
		// Case 003, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 148, 152},
		},
		// Case 004, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 131, 152},
		},
		// Case 005, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 127, 147},
		},
		// Case 006, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 123, 131, 119},
		},
		// Case 007, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 120, 131, 152},
		},
		// Case 008, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{123, 120, 130, 159},
		},
		// Case 009, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 146, 152},
		},
		// Case 010, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 131, 152},
		},
		// Case 011, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 137, 158},
		},
		// Case 012, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 123, 131, 139},
		},
		// Case 013, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 120, 131, 160},
		},
		// Case 014, ~3.00 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 121, 103, 163},
		},
		// Case 015, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 122, 110, 159},
		},
		// Case 016, ~3.00 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 122, 100, 163},
		},
		// Case 017, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 123, 111, 113},
		},
		// Case 018, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 121, 163, 100},
		},
		// Case 019, ~2.81 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{121, 121, 100, 101},
		},
		// Case 020, ~2.80 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{122, 122, 115, 104},
		},
		// Case 021, ~2.80 ns/op
		{
			win: Window{
				{100, 100, 100, 100}, // bl
				{100, 100, 100, 100}, // tr
			},
			bck: Bucket{100, 100, 100, 101},
		},
		// Case 022, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 123, 131, 152},
		},
		// Case 023, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 124, 138, 114},
		},
		// Case 024, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 125, 148, 152},
		},
		// Case 025, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 124, 129, 150},
		},
		// Case 026, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{126, 124, 127, 147},
		},
		// Case 027, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 123, 131, 119},
		},
		// Case 028, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{124, 119, 131, 152},
		},
		// Case 029, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{125, 118, 130, 159},
		},
		// Case 030, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{120, 119, 146, 152},
		},
		// Case 031, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 119, 131, 152},
		},
		// Case 032, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{116, 119, 137, 158},
		},
		// Case 033, ~1.90 ns/op
		{
			win: Window{
				{120, 120, 131, 152}, // bl
				{123, 123, 131, 152}, // tr
			},
			bck: Bucket{119, 123, 131, 139},
		},
	}

	for i, tc := range testCases {
		b.Run(fmt.Sprintf("%03d", i), func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				tc.win.Has(tc.bck)
			}
		})
	}
}
